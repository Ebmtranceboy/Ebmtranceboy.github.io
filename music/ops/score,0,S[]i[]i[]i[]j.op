opcode nthbit,i,ii
  ip,inth xin 
  
  i0 = ip % 2
  if (inth == 0) goto done
  
  loop:
  	ip = (ip - i0) / 2
  	i0 = ip % 2
  	inth -= 1
  if (inth != 0) goto loop

  done:
  	xout i0 
endop 

opcode elem,i,i[]iiii
  iarr[], ioffset, icols, icol, irow xin 
  xout iarr[(ioffset + irow) * icols + icol]
endop  

opcode sum,i,i[]iiii
  iarr[],ioffset,irows,icols,icol xin 
  idx = -1
  isum = 0
  
  loop:
  	idx += 1
  	isum += elem(iarr, ioffset, icols, icol, idx)
  if idx < irows - 1 goto loop

  xout isum
endop

opcode cue3,i,i[]iiiiii
  idurs[], ioffset, icols,icol,istart,im,is xin
  iy = elem(idurs,ioffset,icols,icol,istart)
  
  if (im<is+iy) then
    iout = istart
  else 
    iout = cue3(idurs,ioffset,icols,icol,istart+1,im,is+iy)
  endif
  xout iout
endop

opcode cue2,i,i[]iiiii
  idurs[], ioffset, icols,icol,isum,im xin 
  
  if (im >= isum) then
    iout = cue2(idurs, ioffset, icols,icol, isum, im-isum)
  else
    iout = cue3(idurs,ioffset,icols,icol, 0, im, 0)
  endif
  xout iout
endop 

opcode cue1,i,i[]iiiii
  idurs[], ioffset, irows, icols,icol, idelay xin 
  isum = sum(idurs,ioffset,irows,icols,icol)
  xout cue2(idurs, ioffset, icols,icol, isum, (now_tick()-1-idelay+isum)%isum)
endop 

opcode cue0,i,i[]iiii
  idurs[],ioffset, irows, icols,icol xin 
  xout cue1(idurs,ioffset, irows, icols,icol, 0)
endop

opcode cue,ii,i[]iiiii
  ivoxes[],ioffset, irows, icols,irep,ibit xin 
  
  if irows == 1 then
    indx = 0
    irep0 = elem(ivoxes,ioffset,icols,irep,0)
    istem = 1 + (now_tick()-1  + irep0) % irep0
  else
 
    indx = cue0(ivoxes,ioffset, irows, icols,irep)
    istem = -1
    loop:
      istem += 1
      if cue1(ivoxes,ioffset, irows, icols,irep, istem) == indx goto loop
   endif 
    
   if istem > 0 then
     ibit = nthbit(elem(ivoxes,ioffset,icols,ibit,indx),istem-1)
   else
	ibit = 0
   endif
        
  xout indx, ibit
 endop

opcode score,0,S[]i[]i[]i[]j
  Sinstrs[], ivoxsteps[], ivoxes[], itriggers[], iparameters xin 
    
  if iparameters < 0 then
    iparameters = 6
  endif 
  
  iacc = 0
  itref = -1
  
  it = -1
  loop_trigger:
  	it += 1
  	ischeme = itriggers[it]
  
  	imaxlen = 0

    iv = -1
    ioffset = 0
    loop_vox0:
      iv += 1
      isteps = abs(ivoxsteps[iv]) 
  	  iplay = nthbit(ischeme, iv)
  	  
  	  if iplay == 1 then
        
        isumreps = sum(ivoxes,ioffset,isteps,iparameters,1)
        if imaxlen < isumreps then
          imaxlen = isumreps
        endif 
        
      endif 
      ioffset += isteps
  	  if iv<lenarray(ivoxsteps)-1 goto loop_vox0

    if iacc <= now_tick() && now_tick() < iacc + imaxlen then
      itref = it
    endif
    iacc += imaxlen
    if itref == -1 && it < lenarray(itriggers) - 1 goto loop_trigger
      
  if itref < 0 goto done
  ischeme = itriggers[itref]

  iv = -1
  ioffref = -1
  ioffset = 0
  loop_vox1:
  	 iv += 1
     iplay = nthbit(ischeme, iv)
     isteps = ivoxsteps[iv]
     if iplay == 1 then
       indx, istem = cue(ivoxes,ioffset,isteps,iparameters,1,2)
       if istem == 1 then
         schedule(Sinstrs[elem(ivoxes, ioffset, iparameters, 0, indx)], 
           0, 
           elem(ivoxes, ioffset, iparameters, 3, indx), 
           elem(ivoxes, ioffset, iparameters, 4, indx), 
           elem(ivoxes, ioffset, iparameters, 5, indx))
         endif 
     endif
     ioffset += isteps
    if iv<lenarray(ivoxsteps)-1 goto loop_vox1
  	done:
endop
   